#!/usr/bin/perl
use File::Spec;
use File::Slurp;
use File::Basename;
use File::Copy;
use Net::FTP;
use File::Find;
use Sort::Versions;
use Getopt::Long::Descriptive;
use Config::INI::Simple;
use Archive::Zip;
use File::Temp qw/tempdir/;
use File::Path qw/make_path/;
use strict;
use warnings;

our ($opt, $usage) = describe_options(
    "%c %o <app-directory>",
    [beta           => "OK to download beta versions of xulrunner"],
    ["xulversion=s" => "Force a specific version of xulrunner"],
    [   "platforms=s\@" =>
          "Platforms to build (linux, mac, windows - can be specified multiple times; defaults to all)",
        { default => [qw/mac linux windows /] }],
    [   "xultmpdir=s" => "Temporary directory for xulrunner downloads",
        { default => "/tmp/xulrunners" }],
    ["icns=s"       => "Icon file (OS X)"],
    ["identifier=s" => "Bundle identifier (OS X)"],
    ["volicon=s"    => "Custom volume icon (OS X)"],
    [   "skipownerchecks" =>
          "Don't check the ownership of cached xulrunners (Normally a bad idea)"
    ],
    ["verbose:i" => "Be more chatty"],
    [help        => "print usage message and exit"],);
my %platforms = map { $_ => 1 } @{ $opt->platforms };
print($usage->text), exit if $opt->help;

if ($platforms{mac}) {
    if ($opt->icns) {
        $opt->{icns} = File::Spec->rel2abs($opt->icns);
    } else {
        die
          "You need to specify an application icon file (--icns) to release on Mac OS X\n";
    }
}

our $app = {};    # Container for stuff

sub VERBOSE ($) { warn "@_\n" if defined $opt->verbose }
sub DEBUG ($) { warn "@_\n" if defined $opt->verbose and $opt->verbose > 1 }

get_app_basic_data();
get_xulrunners();

for my $platform (@{ $opt->platforms }) {
    if ($platform eq "win") { $platform = "windows"; $platforms{windows}++ }
    if ($platform eq "osx") { $platform = "mac";     $platforms{mac}++ }
    if ($platform !~ (/^(windows|mac|linux)$/)) {
        die "Unknown platform: $platform\n";
    }
    my $where =
        tempdir(CLEANUP => 1) . "/"
      . $app->{name} . "-"
      . $app->{version} . "-"
      . $platform;
    if ($platform eq "mac") {
        $where .= "/" . $app->{name} . ".app/Contents/Resources/";
    }
    make_path($where) or die "Can't make deployment directory $where";
    VERBOSE("Building $platform installer in $where");
    layout_pristine_installdir($where);
    chdir $where;
    "XulPackager::${platform}"->package();
}

sub get_app_basic_data {
    my $appdir = (shift @ARGV) || ".";
    chdir $appdir;
    die "Can't find application.ini" unless -f "application.ini";
    my $ini = Config::INI::Simple->new("application.ini");
    $app->{name}    = $ini->{App}{Name};
    $app->{version} = $ini->{App}{Version};
    $app->{vendor}  = $ini->{App}{Vendor};
    $app->{ini}     = $ini;
    VERBOSE("Bundling $app->{name} v$app->{version}");
    my @files;

    if (-d ".git") {
        @files = `git ls-files`;
        chomp $_ for @files;

        # Presumably other version control systems exist but I know nothing
        # about them
        my $healthcheck = `git status --porcelain`;
        if ($healthcheck =~ /^ M/) {
            die
              "Modified files in git working directory! Bailing out!\n$healthcheck";
        } elsif ($healthcheck =~ /^\?\?/) {
            warn "WARNING: Untracked files in git working directory\n";
        }
    } else {
        require File::Find;
        File::Find::find(sub { push @files, $File::Find::name }, ".");
    }
    if (-f ".xulpackagerignore") {
        my $ignore = read_file(".xulpackagerignore");
        my @rules = split /\n/, $ignore;
        @files = grep {
            my $ok = 1;
            for my $rule (@rules) {
                if (/$rule/) { $ok = 0; last }
            }
            $ok
        } @files;
    }
    $app->{files} = \@files;
    if (defined $opt->volicon) {
        $app->{volicon} = File::Spec->rel2abs($opt->volicon);
    }
}

sub get_xulrunners {
    VERBOSE("Getting xulrunners");
    if (!-d $opt->xultmpdir) {
        mkdir $opt->xultmpdir
          or die "Can't make temp directory $opt->xultmpdir";
    }
    my $ftp = Net::FTP->new("ftp.mozilla.org", Debug => 0)
      or die "Cannot connect to Moz: $@";
    $ftp->hash(*STDERR, 1024 * 1024) if $opt->verbose;
    $ftp->login("anonymous", '-anonymous@')
      or die "Cannot login ", $ftp->message;
    $ftp->binary;    # It's 2012 and I'm doing this.
    $ftp->cwd("/pub/mozilla.org/xulrunner/releases/")
      or die "Cannot change working directory ", $ftp->message;
    my $ver = $opt->xulversion || do {
        my @vers = sort versioncmp $ftp->ls();
        if (!$opt->beta) {
            @vers = grep { !/b/ } @vers;
        }
        $vers[-1];
    };
    die
      "Would package xulrunner $ver but max Gecko version is $app->{ini}{Gecko}{MaxVersion}; fix ini file?\n"
      if versioncmp($ver, $app->{ini}{Gecko}{MaxVersion}) == 1;
    die
      "Would package xulrunner $ver but min Gecko version is $app->{ini}{Gecko}{MinVersion}; fix ini file?\n"
      if versioncmp($app->{ini}{Gecko}{MinVersion}, $ver) == 1;
    $ftp->cwd("$ver/runtimes") or die "Can't find version $ver";
    my @files = $ftp->ls;
    for (@files) {
        my $dest = $opt->xultmpdir . "/$_";
        if (-f $dest && !-o $dest && !$opt->skipownerchecks) {
            die
              "DANGER! $dest exists but current user doesn't own it; check it wasn't poisoned! (--skipownerchecks to skip)\n";
        }
        next unless /(pkg\.dmg|win32\.zip|tar\.bz2)$/;
        my $plat;
        if (/pkg\.dmg$/)   { $plat = "mac"; }
        if (/win32\.zip$/) { $plat = "windows"; }
        if (/tar\.bz2$/)   { $plat = "linux"; }
        next unless $platforms{$plat};
        $app->{engine}{$plat} = $dest;
        next if -f $dest;
        VERBOSE "Getting $plat runtime $_";
        local $SIG{INT} = sub { unlink($dest); exit 1 };
        $ftp->get($_, $dest) or (unlink $dest), die "Couldn't download $_";
    }
    $app->{xulversion} = $ver;    # Store this, we need it later
}

sub layout_pristine_installdir {
    my $where = shift;
    VERBOSE(" Copying files to distribution directory");
    for (@{ $app->{files} }) {
        DEBUG("  Copying $_ -> $where/$_");
        if (!-d dirname("$where/$_")) {
            make_path(dirname("$where/$_")) or die $!;
        }
        copy($_, $where . "/" . $_) or die $!;
    }
}

package XulPackager::mac;
use File::Temp qw/tempdir/;
use File::Copy;

sub package {
    if ($^O ne "darwin") {
        warn
          "I'm sorry, I can only build OS X packages on OS X because I need to mount and create .dmg files";
        return;
    }
    create_info_plist();
    copy_xul_framework();
    copy_stub_executable();
    put_app_in_dmg();
}

sub create_info_plist {
    my $identifier = $::opt->identifier
      || "org.mozilla.xulrunner." . $::app->{name};
    open PLIST, "> ../Info.plist" or die $!;
    print PLIST <<EOF;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDevelopmentRegion</key> <string>English</string>
    <key>CFBundleExecutable</key> <string>xulrunner</string>
    <key>CFBundleGetInfoString</key> <string>1.0</string>
    <key>CFBundleIconFile</key> <string>@{[ $::opt->icns ]}</string>
    <key>CFBundleIdentifier</key> <string>$identifier</string>
    <key>CFBundleInfoDictionaryVersion</key> <string>6.0</string>
    <key>CFBundleName</key> <string>@{[ $::app->{name} ]}</string>
    <key>CFBundlePackageType</key> <string>APPL</string>
    <key>CFBundleShortVersionString</key> <string>1.0</string>
    <key>CFBundleSignature</key> <string>????</string>
    <key>CFBundleVersion</key> <string>1.0</string>
</dict>
</plist>
EOF
}

sub copy_xul_framework {
    my $tmp = tempdir(CLEANUP => 1);
    ::VERBOSE("Installing xulrunner");
    mkdir("../Frameworks") or die "Couldn't make Frameworks dir: $!";
    chdir("../Frameworks") or die "Couldn't change to Frameworks dir: $!";
    die "Couldn't find xulrunner (can't happen?)\n"
      unless -f $::app->{engine}{mac};
    system("hdiutil", "attach", "-quiet", "-noautoopen", "-mountpoint", $tmp,
        $app->{engine}{mac});
    my ($pkg) = glob("$tmp/*.pkg");
    die "Didn't mount DMG?\n" unless -d $pkg;

    # Do the manual install
    system("pax", "-zrf", "$pkg/Contents/Archive.pax.gz");
    system("hdiutil", "detach", $tmp, "-quiet");
    chdir("..");
}

sub copy_stub_executable {
    mkdir("MacOS") or die "Couldn't make MacOS dir: $!";
    my $path = "Frameworks/XUL.framework/Versions/Current/";
    die "Could't find xulrunner?\n" unless -f "$path/xulrunner";
    system("ditto", "$path/xulrunner", "MacOS/xulrunner");
    if ($::app->{xulversion} > 9) {    # Wait, there are more
        system("ditto", "$path/libmozutils.dylib", "MacOS/libmozutils.dylib");
    }

}

sub put_app_in_dmg {
    my $tmp = tempdir(CLEANUP => 1);
    my $size = `du -sk .`;
    $size =~ /(\d+)/;
    $size = $1 * 1.1;                  # For luck
    my $dmg = $::app->{name} . "-" . $::app->{version} . ".dmg";
    ::VERBOSE("Placing app into /tmp/$dmg");
    if (-f "/tmp/$dmg") {
        die "Whoa there! /tmp/$dmg already exists!\n";
    }

    ::DEBUG(" Creating a ${size}k DMG file $dmg");
    system(
        "hdiutil", "create", "/tmp/$dmg",
        "-size"    => $size . "k",
        "-fs"      => "HFS+",
        "-volname" => "$app->{name} $app->{version}",
        "-quiet");
    system("hdiutil", "attach", "-quiet", "-noautoopen", "-mountpoint", $tmp,
        "/tmp/$dmg");
    chdir("../..");

    ::DEBUG(" Copying in contents");
    system("ditto -rsrcFork . $tmp");

    $::app->{volicon} ||= $::opt->icns;
    ::DEBUG(" Copying in custom icon");
    system("ditto", "-rsrcFork", $::app->{volicon}, "$tmp/.VolumeIcon.icns");
    system("SetFile -a C $tmp");

    system("hdiutil", "detach", $tmp, "-quiet");
    ::DEBUG(" Converting to compressed read-only DMG");
    system(
        "hdiutil", "convert", "/tmp/$dmg",
        "-format" => "UDZO",
        "-o"      => "/tmp/$dmg.udzo.dmg",
        "-quiet");
    if (-f "/tmp/$dmg.udzo.dmg") {
        unlink("/tmp/$dmg") && rename("/tmp/$dmg.udzo.dmg", "/tmp/$dmg");
    }
    print("Wrote /tmp/$dmg\n");
}

package XulPackager::windows;
use File::Copy;
use Win32::Exe;
use File::Find;

sub package {
    if (`makensis -VERSION` !~ /^v/) {
        warn
          "I need makensis installed to make Windows installers. I can't find it, so skipping.\n";
        warn "Try installing homebrew and 'brew install makensis'\n"
          if $^O eq "darwin";
        return;
    }
    copy_xul_framework();
    set_icon();
    make_installer();
}

sub copy_xul_framework {
    ::VERBOSE("Installing xulrunner");
    my $xul_zip = Archive::Zip->new($::app->{engine}{windows});
    $xul_zip->extractTree();
    copy("xulrunner/xulrunner-stub.exe", $::app->{name} . ".exe");
    copy("xulrunner/libmozutils.dll",    "libmozutils.dll")
      if $::app->{xulversion} > 9;
}

sub set_icon {
    if (-f "chrome/branding/icon48.png") {
        system("convert", "chrome/branding/icon48.png",
            $::app->{name} . ".ico");
        Win32::Exe->new($::app->{name} . ".exe")
          ->update(icon => $::app->{name} . ".ico");
    }
}

sub make_installer {
    my ($part1, $part2, $part3);
    find({  no_chdir => 1,
            wanted   => sub {
                $a = $_;
                s/..//;
                s/\//\\/g;
                $part1 .=
                  -d $a
                  ? "SetOutPath \"\$INSTDIR\\"
                  : "File \"";
                $part1 .= "$_\"\n";
                if (-d $a) {
                    $part3 .= qq{ RMDir "\$INSTDIR\\$_"\n};
                } else {
                    $part2 .= qq{ Delete "\$INSTDIR\\$_"\n};
                }
              }
        },
        ".");
    open OUT, ">installer.nsis" or die $!;
    print OUT <<EOF;
!define VERSION "$::app->{version}" 
!define APPNAME "$::app->{name}"
EOF
    print OUT <<'EOF';
!define APPNAMEANDVERSION "${APPNAME} ${VERSION}"
Name "${APPNAMEANDVERSION}"
InstallDir "$PROGRAMFILES\\${APPNAME}"
OutFile "${APPNAME}-${VERSION}-Installer.exe"
!include "MUI.nsh"
!define MUI_ABORTWARNING
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES
!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_RESERVEFILE_LANGDLL
Section "${APPNAME}" Section1
    SetOverwrite on
EOF
    print OUT $part1;
    print OUT <<'EOF';
    CreateShortCut "$DESKTOP\${APPNAME}.lnk" "$INSTDIR\${APPNAME}.exe"
    CreateDirectory "$SMPROGRAMS\${APPNAME}"
    CreateShortCut "$SMPROGRAMS\${APPNAME}.lnk" "$INSTDIR\${APPNAME}.exe"
    CreateShortCut "$SMPROGRAMS\${APPNAME}\Uninstall.lnk" "$INSTDIR\uninstall.exe"
SectionEnd

Section -FinishSection
    WriteRegStr HKLM "Software\${APPNAME}" "" "$INSTDIR"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayName" "${APPNAME}"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "UninstallString" "$INSTDIR\uninstall.exe"
    WriteUninstaller "$INSTDIR\uninstall.exe"
SectionEnd

; Modern install component descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
!insertmacro MUI_DESCRIPTION_TEXT ${Section1} ""
!insertmacro MUI_FUNCTION_DESCRIPTION_END

Section Uninstall
    DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}"
    DeleteRegKey HKLM "SOFTWARE\${APPNAME}"
    Delete "$INSTDIR\uninstall.exe"
    Delete "$DESKTOP\${APPNAME}.lnk"
    Delete "$SMPROGRAMS\${APPNAME}\${APPNAME}.lnk"
    Delete "$SMPROGRAMS\${APPNAME}\Uninstall.lnk"
    RMDir /r "$INSTDIR\"
SectionEnd
EOF

    close OUT;
    system("makensis installer.nsis");
    my $out = "$::app->{name}-$::app->{version}-Installer.exe";
    if (-f $out) {
        move($out, "/tmp/$out");
    }
    print("Wrote /tmp/$out\n");
}

package XulPackager::linux;
use Archive::Tar;
use File::Copy;
use File::Find;

sub package {
    ::VERBOSE("Installing xulrunner");
    my $xul_tar = Archive::Tar->new($::app->{engine}{linux});
    $xul_tar->extract();
    my $name = lc $::app->{name};    # It's linux, after all.
    copy("xulrunner/xulrunner-stub", $name);
    chmod(0755, $name);              # copy doesn't preserve permissions :(
    chdir("..");
    my @files;
    find(sub { push @files, $File::Find::name }, '.');
    ::VERBOSE("Writing archive");
    my $tar = Archive::Tar->new();
    $tar->add_files(@files);
    $tar->write("/tmp/$::app->{name}-$::app->{version}.tar.bz2", COMPRESS_BZIP);
    print("Wrote /tmp/$::app->{name}-$::app->{version}.tar.bz2\n");
}
